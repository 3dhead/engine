/**
 * @file
 */

#pragma once

#include "compute/Shader.h"
#include "core/Singleton.h"
#include "core/SharedPtr.h"
#include "core/Assert.h"
#include "core/Vector.h"
#ifdef COMPUTEVIDEO
#include "computevideo/ComputeVideo.h"
#endif
#include <glm/fwd.hpp>
#include <glm/gtc/vec1.hpp>
#include <glm/vec2.hpp>
#include <glm/vec3.hpp>

namespace $namespace$ {

namespace priv$name$ {
static const char* ShaderBuffer = $shaderbuffer$;
}

/**
 * @brief Compute shader wrapper for @c $filename$
 * @ingroup Compute
 */
class $name$ : public compute::Shader {
private:
	using Super = compute::Shader;
	int _setupCalls = 0;
$members$
public:
	static inline $name$& getInstance() {
		return core::Singleton<$name$>::getInstance();
	}

$structs$

	/**
	 * @brief Load the compute shader
	 * @note Multiple setup() calls are fine. Just make sure that shutdown() is called as many times.
	 * @see shutdown()
	 */
	bool setup() override {
		++_setupCalls;
		if (_initialized) {
			return true;
		}
		if (!init()) {
			return false;
		}
		if (!load("$filename$", priv$name$::ShaderBuffer)) {
			return false;
		}
$createkernels$
		return true;
	}

	/**
	 * @brief If no other instance is active anymore the shader is unloaded.
	 * @see setup()
	 */
	void shutdown() override {
		if (_setupCalls == 0) {
			return;
		}
		--_setupCalls;
		if (_setupCalls > 0) {
			return;
		}
$shutdown$
		Super::shutdown();
	}
$kernels$
};

typedef core::SharedPtr<$name$> $name$Ptr;

}
