project(glslang)
if(WIN32)
	include(ChooseMSVCCRT.cmake)
	add_definitions(-DGLSLANG_OSINCLUDE_WIN32)
elseif(UNIX)
	add_definitions(-fPIC)
	add_definitions(-DGLSLANG_OSINCLUDE_UNIX)
else(WIN32)
	message("unknown platform")
endif(WIN32)

function(glslang_set_link_args TARGET)
	# For MinGW compiles, statically link against the GCC and C++ runtimes.
	# This avoids the need to ship those runtimes as DLLs.
	if(WIN32)
		if(${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
			set_target_properties(${TARGET} PROPERTIES LINK_FLAGS "-static -static-libgcc -static-libstdc++")
		endif()
	endif(WIN32)
endfunction(glslang_set_link_args)

add_subdirectory(glslang)
add_subdirectory(OGLCompilersDLL)
add_subdirectory(StandAlone)
add_subdirectory(SPIRV)
target_compile_definitions(glslangValidator PRIVATE "-DENABLE_OPT=0")

if (NOT MSVC)
	set(ADDITIONAL_COMPILE_FLAGS)
	check_c_compiler_flag("-Wimplicit-fallthrough=0" HAS_IMPLICIT_FALLTHROUGH)
	if (HAS_IMPLICIT_FALLTHROUGH)
		set(ADDITIONAL_COMPILE_FLAGS "${ADDITIONAL_COMPILE_FLAGS} -Wimplicit-fallthrough=0")
	endif()
	check_c_compiler_flag("-Wno-unused-function" HAS_NO_UNUSED_FUNCTION)
	if (HAS_NO_UNUSED_FUNCTION)
		set(ADDITIONAL_COMPILE_FLAGS "${ADDITIONAL_COMPILE_FLAGS} -Wno-unused-function")
	endif()
	set_target_properties(glslang PROPERTIES COMPILE_FLAGS "-Wno-reorder -Wno-unknown-pragmas -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(glslangValidator PROPERTIES COMPILE_FLAGS "-Wno-reorder -Wno-unknown-pragmas -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(SPVRemapper PROPERTIES COMPILE_FLAGS "-Wno-reorder -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(SPIRV PROPERTIES COMPILE_FLAGS "-Wno-reorder -Wno-unused-variable -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
endif()
