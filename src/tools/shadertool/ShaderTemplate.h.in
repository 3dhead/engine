/**
 * @file
 */

#pragma once

#include "video/Shader.h"
#include "video/Types.h"
#include "video/UniformBuffer.h"
#include "core/Singleton.h"
#include "core/Assert.h"
#include "core/collection/Array.h"
#include "core/SharedPtr.h"

$includes$

namespace $namespace$ {

/**
 * @ingroup Video
 * @brief Shader wrapper for $filename$
 */
class $name$ : public video::Shader {
private:
	using Super = video::Shader;
	int _setupCalls = 0;
public:
	static inline $name$& getInstance() {
		return core::Singleton<$name$>::getInstance();
	}

	~$name$();

	/**
	 * @brief Load the vertex and fragment shaders and verifies that its attributes and uniforms are used.
	 * @note If an attribute or an uniform isn't active, a message will be printed about that fact - but
	 * the setup process won't fail.
	 * @note Multiple setup() calls are fine. Just make sure that shutdown() is called as many times.
	 * @see shutdown()
	 */
	bool setup() override;

	/**
	 * @brief If no other instance is active anymore the shader is unloaded.
	 * @see setup()
	 */
	void shutdown() override;
$prototypes$
};

typedef core::SharedPtr<$name$> $name$Ptr;

};
