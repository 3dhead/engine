/**
 * @file
 */

#pragma once

#include <vector>
#include "video/Shader.h"
#include "video/Types.h"
#include "video/UniformBuffer.h"
#include "core/Singleton.h"

$includes$

namespace $namespace$ {

/**
 * @ingroup Video
 * @brief Shader wrapper for $filename$
 */
class $name$ : public video::Shader {
private:
	using Super = video::Shader;
	int _setupCalls = 0;
public:
	static inline $name$& getInstance() {
		return core::Singleton<$name$>::getInstance();
	}

	/**
	 * @brief Load the vertex and fragment shaders and verifies that its attributes and uniforms are used.
	 * @note If an attribute or an uniform isn't active, a message will be printed about that fact - but
	 * the setup process won't fail.
	 */
	bool setup() override {
		++_setupCalls;
		if (_initialized) {
			return true;
		}
		if (!loadProgram("$filename$")) {
			return false;
		}
		$attributes$
		$uniforms$
$uniformarrayinfo$
		return true;
	}

	void shutdown() override {
		if (_setupCalls == 0) {
			return;
		}
		--_setupCalls;
		if (_setupCalls == 0) {
			Super::shutdown();
		}
	}

$setters$
};

typedef std::shared_ptr<$name$> $name$Ptr;

};
